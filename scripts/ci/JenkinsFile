properties(
  [
    buildDiscarder(
      logRotator(
        numToKeepStr: env.BRANCH_NAME ==~ /master|main|develop|dev/ ? '10' : '2'
      )
    ),
    disableConcurrentBuilds()
  ]
)

// -----------------------------------------------------
//            Project Specific Variables
// -----------------------------------------------------

// Global Variables
APP_NAME = 'squire'                                           //  The App name

// GIT Variables
GIT_URL = 'https://gitlab.gs.mil/DGS1SDT/squire.git'          //  Address of Git repo to pull
GIT_BRANCH = env.BRANCH_NAME                                  //  Branch name (env.BRANCH_NAME is available instead, this just uses that)
GIT_CREDENTIALS_ID = 'c7f06540-c586-4b51-8d5a-cb1b91510aed'   //  ID of the credential Jenkins should use to connect to the above Git repo

// SonarQube Variables
SONAR_APP_ORG = 'dgs1sdt'                                     // Org name in SonarQube
SONAR_APP_VERSION = '0.0.1'                                   // App version to send to SonarQube
SONAR_CREDS = 'sonar-prod-publish-token'                      // Credential to use for SonarQube
SONAR_TOOL = 'SonarQube Runner 3.0'                           // SonarQube tool name
SONAR_XMX = '512m'                                            // Memory allocation
SONAR_HOST = 'https://sonar.gs.mil'                           // Address of the Sonar instance

// Threadfix Variables
THREADFIX_APP_ID = '600'                                      // Threadfix App ID (Provided by NGA when you request a threadfix project in RocketChat -> #threadfix_askanexpert)
THREADFIX_CREDS = 'THREADFIXAPIKEY_squire'                    // API Key (Provided by NGA when you request a threadfix project in RocketChat -> #threadfix_askanexpert)

// PCF Deploy variables
DEPLOY_ORG = 'DGS1SDT'                                        //  PCF Org name
DEPLOY_OPS_BRANCHES = ['master', 'main']                      //  Git branches to deploy to PCF_OPS
DEPLOY_DEV_BRANCHES = ['develop', 'dev']                      //  Git branches to deploy to PCF_DEV
DEPLOY_API_DEV = 'api.system.dev.east.paas.nga.mil'           //  PCF-Dev API address
DEPLOY_API_OPS = 'api.system.east.paas.nga.mil'               //  PCF-Ops API address
DEPLOY_CREDS_DEV = 'dgs1sdt_cloud_foundry_dev_credential'     //  PCF-Dev credential ID
DEPLOY_CREDS_OPS = 'dgs1sdt_cloud_foundry_ops_credential'     //  PCF-Ops credential ID

// -----------------------------------------------------
//        End project variables
// -----------------------------------------------------

// -----------------------------------------------------
//        Sonar tool setup
// -----------------------------------------------------
def writeSonarProps(SONAR_APP_VERSION) {
  writeFile file: 'sonar-project.properties', text:"""
    sonar.projectKey=${SONAR_APP_ORG}:${APP_NAME}
    sonar.projectName=${APP_NAME}
    sonar.projectVersion=${SONAR_APP_VERSION}
    sonar.sources=.
    sonar.exclusions=public/**/*,docs/swagger.json,node_modules/**/*,coverage/**/*,test/**/*,environment/cloudfoundry/test/**/*,\\
    environment/local/test/**/*,functionalTests/**/*,${env.WORKSPACE}/npm_cache/**/*,${env.WORKSPACE}/yarn_cache/**/*
    sonar.test.exclusions=test/**/*,environment/cloudfoundry/test/**/*,environment/local/test/**/*,functionalTests/**/*
    sonar.sourceEncoding=UTF-8
    sonar.javascript.lcov.reportPath=coverage/lcov/dashboard.lcov
    sonar.links.ci=${JOB_URL}
    sonar.links.homepage=https://redmine.gs.mil/projects/dgs1sdt_${APP_NAME}
    sonar.links.scm=https://gitlab.gs.mil/DGS1SDT/${APP_NAME}
    sonar.links.scm_dev=https://gitlab.gs.mil/DGS1SDT/${APP_NAME}
  """
}


// -----------------------------------------------------
// Node tool setup for nodejs, wrap stage in withNode {}
// -----------------------------------------------------
def withNode(Closure body) {
  def customConfig = "${env.WORKSPACE}/npm_userconfig"
  def nodeHome = "${tool 'NodeJS_LTS'}"
  withEnv(["PATH+NODE=${nodeHome}/bin", "NPM_CONFIG_CACHE=${env.WORKSPACE}/npm_cache"]) {
    def defaultConfig = sh (
    script: 'npm config get userconfig | tail -1',
    returnStdout: true).trim()
    sh "cp '${defaultConfig}' '${customConfig}'"
  }

  // custom cache
  def customCache = "${env.WORKSPACE}/npm_cache"
  sh "mkdir -p '${customCache}'"

  withEnv(["PATH+=${nodeHome}/bin", "NPM_CONFIG_CACHE=${customCache}", "NPM_CONFIG_USERCONFIG=${customConfig}"]) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
      // fix a couple configuration items that arenâ€™t set correctly in the default configuration
      sh 'npm config set strict-ssl true'
      sh 'npm config set cafile /etc/pki/tls/cert.pem'

      // configure git to change ssh URLs to github.com to https URLs on the fly to get around blocked github.com ssh access
      sh 'git config --global --unset-all url."https://github.com/".insteadOf || true'
      sh 'git config --global url."https://github.com/".insteadOf git://github.com/'
      sh 'git config --global --add url."https://github.com/".insteadOf git@github.com:'
      sh 'git config --global --add url."https://github.com/".insteadOf ssh://git@github.com/'
      
      // run the wrapped stages
      body()
    }
  }
}

// -----------------------------------------------------
//        Begin stage definitions
// -----------------------------------------------------
node ('Standard') {                                 //  Pick a 'Standard' node to execute on

  // -----------------------------------------------------
  //        Clean workspace & checkout from gitlab
  // -----------------------------------------------------
  stage ('Clean & Checkout') {
    cleanWs()

    git url: "${GIT_URL}", branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", poll: true
  }

  // -----------------------------------------------------
  //        Run tests & build output files (if needed)
  // -----------------------------------------------------
  withNode{
    stage ('Test & Build') { 
      // TODO: Break Test and Build out into separate stages
      sh 'CI=true ./scripts/test.sh'
      sh 'CI=true ./scripts/build.sh'
    }
  }

  // -----------------------------------------------------
  //        Upload sources for SonarQube inspection
  // -----------------------------------------------------
  stage('SonarQube') {
    writeSonarProps(SONAR_APP_VERSION)
    def SCANNER_HOME = tool("${SONAR_TOOL}")
    
    fileExists 'sonar-project.properties'

    withEnv(["SONAR_SCANNER_OPTS=-Xmx${SONAR_XMX}"]) {
      withCredentials([[$class: 'StringBinding', credentialsId: "${SONAR_CREDS}", variable: 'SONAR_LOGIN']]) {
        sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_LOGIN}"
      }
    }
  }

  // -----------------------------------------------------
  //        Run Fortify
  // -----------------------------------------------------
  stage  ('Fortify') {
    sh '/opt/hp_fortify_sca/bin/sourceanalyzer -64 -verbose -Xms2G -Xmx10G -b ${BUILD_NUMBER} -clean'
    sh '/opt/hp_fortify_sca/bin/sourceanalyzer -64 -verbose -Xms2G -Xmx10G -b ${BUILD_NUMBER} "**/*.kt"'
    sh '/opt/hp_fortify_sca/bin/sourceanalyzer -64 -verbose -Xms2G -Xmx10G -b ${BUILD_NUMBER} -scan -f fortifyResults-${BUILD_NUMBER}.fpr'
  }

  // -----------------------------------------------------
  //        Run Threadfix
  // -----------------------------------------------------
  stage  ('Threadfix') {
    withCredentials([string(credentialsId: "${THREADFIX_CREDS}", variable: 'THREADFIX_VARIABLE')]) {
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${BUILD_NUMBER}.fpr\
          https://threadfix.gs.mil/rest/applications/${THREADFIX_APP_ID}/upload?apiKey=${THREADFIX_VARIABLE}"
    }
  }

  // -----------------------------------------------------
  //        Deploy JAR to NGA PCF, based on branch
  // -----------------------------------------------------
  stage ('Deploy NGA') {
    if (DEPLOY_OPS_BRANCHES.contains(env.BRANCH_NAME)) {
      // -----------------------------------------------------
      //        'main' or 'master' -> PCF_OPS - APP_NAME_prod
      // -----------------------------------------------------
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DEPLOY_CREDS_OPS}", passwordVariable: 'PCFPass', usernameVariable: 'PCFUser']]) {
        withEnv(["CF_HOME=${pwd()}"]) {
          echo "Deploying to NGA dev environment -> ${APP_NAME}_prod"
          sh "cf login -a ${DEPLOY_API_OPS} -u $PCFUser -p $PCFPass -o ${DEPLOY_ORG} -s ${APP_NAME}_prod"
          sh 'cf push -f ./scripts/ci/manifest.prod.yml'
        }
      } 
    } else if (DEPLOY_DEV_BRANCHES.contains(env.BRANCH_NAME)) {
      // -----------------------------------------------------
      //        'develop' or 'dev' -> PCF_DEV - APP_NAME_dev
      // -----------------------------------------------------
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DEPLOY_CREDS_DEV}", passwordVariable: 'PCFPass', usernameVariable: 'PCFUser']]) {
        withEnv(["CF_HOME=${pwd()}"]) {
          echo "Deploying to NGA dev environment -> ${APP_NAME}_dev"
          sh "cf login -a ${DEPLOY_API_DEV} -u $PCFUser -p $PCFPass -o ${DEPLOY_ORG} -s ${APP_NAME}_dev"
          sh 'cf push -f ./scripts/ci/manifest.dev.yml'
        }
      } 
    } else {
      // -----------------------------------------------------
      //        All other branches -> PCF_DEV - APP_NAME_test
      // -----------------------------------------------------      
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DEPLOY_CREDS_DEV}", passwordVariable: 'PCFPass', usernameVariable: 'PCFUser']]) {
        withEnv(["CF_HOME=${pwd()}"]) {
          echo "Deploying to NGA dev environment -> ${APP_NAME}_test"
          sh "cf login -a ${DEPLOY_API_DEV} -u $PCFUser -p $PCFPass -o ${DEPLOY_ORG} -s ${APP_NAME}_test"
          sh 'cf push -f ./scripts/ci/manifest.test.yml' 
        }
      } 
    }
  }
}
